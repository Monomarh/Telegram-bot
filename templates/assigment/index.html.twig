{% extends 'base.html.twig' %}

{% block title %}Assigment page{% endblock %}

{% block body %}
    <div id="physicsBody" class="physicsBody">
        <b-jumbotron class="jumbotron-p" header="Physic task">
            <p>Link to presentation: </p>
            <b-button variant="primary"
                      href="https://docs.google.com/presentation/d/1tzfPP6do1Cj3Ns8JmPgS1_goJxBbbXH8M0o_QcJzjt0/edit?usp=sharing">
                Google presentation
            </b-button>
        </b-jumbotron>

        <div class="parameters" id="parameters">
            <div v-for="parameter in parameters" class="parameter">
                <div>Parameter name: ${ parameter.name }</div>
                <div>
                    Parameter value:
                    <input type="number" :min="parameter.min" :max="parameter.max" v-model="parameter.value"/>
                </div>
                <input :min="parameter.min" :max="parameter.max" type="range" v-model="parameter.value"/>
            </div>
        </div>

        <div class="formulaPapa">
            <div class="formulaBlock">
                <div class="formulaElement"> P</div>
                <div class="formulaElement"> =</div>
            </div>

            <div class="formulaBlock">
                <div class="parameterValue">${ parameters.lambda.name } &times;</div>
                <div class="formulaDelimiterBlock">
                    <div>${ parameters.C.name } &times; ${ parameters.U.name }<sup>2</sup></div>
                    <hr class="delimiter"/>
                    <div>${ parameters.epsilon.name }</div>
                </div>
                <div class="formulaElement"> =</div>
            </div>

            <div class="formulaBlock">
                <div class="parameterValue">${ parameters.lambda.value } &times;</div>
                <div class="formulaDelimiterBlock">
                    <div>${ parameters.C.value } &times; ${ parameters.U.value }<sup>2</sup></div>
                    <hr class="delimiter"/>
                    <div>${ parameters.epsilon.value }</div>
                </div>
            </div>

            <div class="formulaBlock">
                <div class="formulaElement"> = ${ getAnswer(1) } W</div>
            </div>
        </div>

        <div class="formulaPapa">
            <div class="formulaBlock">
                <div class="formulaElement"> Q</div>
                <div class="formulaElement"> =</div>
            </div>

            <div class="formulaBlock">
                <div class="parameterValue">${ parameters.lambda.name } &times;</div>
                <div class="formulaDelimiterBlock">
                    <div>${ parameters.C.name } &times; ${ parameters.U.name }<sup>2</sup></div>
                    <hr class="delimiter"/>
                    <div>${ parameters.epsilon.name }</div>
                </div>
                <div class="formulaElement">&times; ${ parameters.t.name }</div>
                <div class="formulaElement"> =</div>
            </div>

            <div class="formulaBlock">
                <div class="parameterValue">${ parameters.lambda.value } &times;</div>
                <div class="formulaDelimiterBlock">
                    <div>${ parameters.C.value } &times; ${ parameters.U.value }<sup>2</sup></div>
                    <hr class="delimiter"/>
                    <div>${ parameters.epsilon.value }</div>
                </div>
                <div class="formulaElement">&times; ${ parameters.t.value }</div>
            </div>

            <div class="formulaBlock">
                <div class="formulaElement"> = ${ answer } J</div>
            </div>
        </div>

        <div id="container" style="width:100%; height:400px;"></div>

        <div class="d-container">
            <a href="#" id="a" @click="create">
                <b-button variant="primary">
                    Download file
                </b-button>
            </a>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link type="text/css" rel="stylesheet" href="https://unpkg.com/bootstrap/dist/css/bootstrap.min.css"/>
    <link type="text/css" rel="stylesheet" href="https://unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.css"/>

    <style>
        p {
            margin-top: 5vh;
        }

        .physicsBody {
            margin: 10px auto;
            width: 80vw;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .parameters {
            align-self: flex-start;
            width: 100%;
            margin-top: 5vh;
        }

        .parameter {
            display: flex;
            margin-bottom: 3vh;
        }

        .parameter div {
            flex-grow: 1;
        }

        .parameter input[type="range"] {
            flex-grow: 2;
        }

        .parameter input[type="number"] {
            width: 70px;
        }

        .formulaBlock {
            display: flex;
            flex-direction: row;
            white-space: nowrap;
        }

        .formulaPapa:nth-child(2n) {
            margin-bottom: 5vh;
            margin-top: 5vh;
        }

        .formulaPapa {
            display: flex;
            justify-content: center;
            align-content: center;
        }

        .formulaElement {
            align-self: center;
            margin-left: 2vh;
        }

        .parameterValue {
            align-self: center !important;
            margin: 0 2vh;
        }

        .formulaDelimiterBlock {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .delimiter {
            margin: 0;
            width: 100%
        }

        @media screen and (max-width: 600px) {
            .formulaPapa {
                display: block !important;
            }

            .formulaBlock:nth-child(2)::before {
                content: "=";
                padding-top: 13px;
            }

            .formulaBlock:nth-child(3)::before {
                content: "=";
                padding-top: 13px;
            }

            .formulaBlock:nth-child(3)::after {
                content: "=";
                padding-top: 13px;
                padding-left: 2vh;
            }
        }

        .jumbotron-p {
            width: 80vw;
        }
    </style>
{% endblock %}

{% block javascripts %}
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.js"></script>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.15/lodash.min.js"></script>

    <script>
        var app = new Vue({
            delimiters: ['${', '}'],
            el: '#physicsBody',
            data: {
                parameters: {
                    U: {name: 'U', value: 1, min: 0, max: 10000},
                    C: {name: 'C', value: 1, min: 0, max: 10000},
                    t: {name: 't', value: 1, min: 0, max: 10000},
                    lambda: {
                        name: String.fromCharCode(parseInt('03BB', 16)),
                        value: 1,
                        min: 0,
                        max: 10000
                    },
                    epsilon: {
                        name: String.fromCharCode(parseInt('03B5', 16)),
                        value: 1,
                        min: 1,
                        max: 10000
                    },
                }
            },
            computed: {
                answer: function() {
                    let array = new Map();

                    _.range(parseInt(this.parameters.t.value) + 1).forEach(time =>
                        array.set(parseFloat(this.getAnswer(time)), time)
                    );

                    console.log(array);

                    Highcharts.chart('container', {
                        chart: {
                            type: 'line'
                        },
                        title: {
                            text: 'Q depends on t'
                        },
                        xAxis: {
                            title: {
                                text: 't, s'
                            },
                        },
                        yAxis: {
                            title: {
                                text: 'Q, J'
                            },
                        },
                        series: [{
                            name: 'Q',
                            data: [...array.keys()]
                        }]
                    });

                    return this.getAnswer(this.parameters.t.value);
                }
            },
            methods: {
                getAnswer(time) {
                    return (
                        this.parameters.lambda.value
                        * this.parameters.C.value
                        * this.parameters.U.value
                        * this.parameters.U.value
                        * time
                        / this.parameters.epsilon.value
                    ).toFixed(2);
                },

                create() {
                    let text = `U = ${this.parameters.U.value} В;
                    \nC = ${this.parameters.C.value} Ф;
                    \nlambda = ${this.parameters.lambda.value} Ом^−1·м^−1;
                    \nepsilon = ${this.parameters.epsilon.value};
                    \n===========================================\n\nОтвет:
                    \nP = ${this.getAnswer(1)} Ватт`;

                    let name = '8.3.45.txt';
                    let type = 'text/plain';

                    let a = document.querySelector('#a');
                    let file = new Blob([text], {
                        type: type
                    });

                    a.href = URL.createObjectURL(file);
                    a.download = name;
                }
            }
        });
    </script>
{% endblock %}
